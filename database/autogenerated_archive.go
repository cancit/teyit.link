// Code generated by go-queryset. DO NOT EDIT.
package database

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set ArchiveQuerySet

// ArchiveQuerySet is an queryset type for Archive
type ArchiveQuerySet struct {
	db *gorm.DB
}

// NewArchiveQuerySet constructs new ArchiveQuerySet
func NewArchiveQuerySet(db *gorm.DB) ArchiveQuerySet {
	return ArchiveQuerySet{
		db: db.Model(&Archive{}),
	}
}

func (qs ArchiveQuerySet) w(db *gorm.DB) ArchiveQuerySet {
	return NewArchiveQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) All(ret *[]Archive) error {
	return qs.db.Find(ret).Error
}

// ArchivedAtEq is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) ArchivedAtEq(archivedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("archived_at = ?", archivedAt))
}

// ArchivedAtGt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) ArchivedAtGt(archivedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("archived_at > ?", archivedAt))
}

// ArchivedAtGte is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) ArchivedAtGte(archivedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("archived_at >= ?", archivedAt))
}

// ArchivedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) ArchivedAtIsNotNull() ArchiveQuerySet {
	return qs.w(qs.db.Where("archived_at IS NOT NULL"))
}

// ArchivedAtIsNull is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) ArchivedAtIsNull() ArchiveQuerySet {
	return qs.w(qs.db.Where("archived_at IS NULL"))
}

// ArchivedAtLt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) ArchivedAtLt(archivedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("archived_at < ?", archivedAt))
}

// ArchivedAtLte is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) ArchivedAtLte(archivedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("archived_at <= ?", archivedAt))
}

// ArchivedAtNe is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) ArchivedAtNe(archivedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("archived_at != ?", archivedAt))
}

// Count is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Archive) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) CreatedAtEq(createdAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) CreatedAtGt(createdAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) CreatedAtGte(createdAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) CreatedAtLt(createdAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) CreatedAtLte(createdAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) CreatedAtNe(createdAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Archive) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) Delete() error {
	return qs.db.Delete(Archive{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Archive{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Archive{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) DeletedAtEq(deletedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) DeletedAtGt(deletedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) DeletedAtGte(deletedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) DeletedAtIsNotNull() ArchiveQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) DeletedAtIsNull() ArchiveQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) DeletedAtLt(deletedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) DeletedAtLte(deletedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) DeletedAtNe(deletedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// FailedAtEq is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) FailedAtEq(failedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("failed_at = ?", failedAt))
}

// FailedAtGt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) FailedAtGt(failedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("failed_at > ?", failedAt))
}

// FailedAtGte is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) FailedAtGte(failedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("failed_at >= ?", failedAt))
}

// FailedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) FailedAtIsNotNull() ArchiveQuerySet {
	return qs.w(qs.db.Where("failed_at IS NOT NULL"))
}

// FailedAtIsNull is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) FailedAtIsNull() ArchiveQuerySet {
	return qs.w(qs.db.Where("failed_at IS NULL"))
}

// FailedAtLt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) FailedAtLt(failedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("failed_at < ?", failedAt))
}

// FailedAtLte is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) FailedAtLte(failedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("failed_at <= ?", failedAt))
}

// FailedAtNe is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) FailedAtNe(failedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("failed_at != ?", failedAt))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) GetUpdater() ArchiveUpdater {
	return NewArchiveUpdater(qs.db)
}

// ImageEq is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) ImageEq(image string) ArchiveQuerySet {
	return qs.w(qs.db.Where("image = ?", image))
}

// ImageIn is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) ImageIn(image ...string) ArchiveQuerySet {
	if len(image) == 0 {
		qs.db.AddError(errors.New("must at least pass one image in ImageIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("image IN (?)", image))
}

// ImageNe is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) ImageNe(image string) ArchiveQuerySet {
	return qs.w(qs.db.Where("image != ?", image))
}

// ImageNotIn is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) ImageNotIn(image ...string) ArchiveQuerySet {
	if len(image) == 0 {
		qs.db.AddError(errors.New("must at least pass one image in ImageNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("image NOT IN (?)", image))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) Limit(limit int) ArchiveQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// MetaDescriptionEq is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) MetaDescriptionEq(metaDescription string) ArchiveQuerySet {
	return qs.w(qs.db.Where("meta_description = ?", metaDescription))
}

// MetaDescriptionIn is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) MetaDescriptionIn(metaDescription ...string) ArchiveQuerySet {
	if len(metaDescription) == 0 {
		qs.db.AddError(errors.New("must at least pass one metaDescription in MetaDescriptionIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("meta_description IN (?)", metaDescription))
}

// MetaDescriptionNe is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) MetaDescriptionNe(metaDescription string) ArchiveQuerySet {
	return qs.w(qs.db.Where("meta_description != ?", metaDescription))
}

// MetaDescriptionNotIn is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) MetaDescriptionNotIn(metaDescription ...string) ArchiveQuerySet {
	if len(metaDescription) == 0 {
		qs.db.AddError(errors.New("must at least pass one metaDescription in MetaDescriptionNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("meta_description NOT IN (?)", metaDescription))
}

// MetaTitleEq is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) MetaTitleEq(metaTitle string) ArchiveQuerySet {
	return qs.w(qs.db.Where("meta_title = ?", metaTitle))
}

// MetaTitleIn is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) MetaTitleIn(metaTitle ...string) ArchiveQuerySet {
	if len(metaTitle) == 0 {
		qs.db.AddError(errors.New("must at least pass one metaTitle in MetaTitleIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("meta_title IN (?)", metaTitle))
}

// MetaTitleNe is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) MetaTitleNe(metaTitle string) ArchiveQuerySet {
	return qs.w(qs.db.Where("meta_title != ?", metaTitle))
}

// MetaTitleNotIn is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) MetaTitleNotIn(metaTitle ...string) ArchiveQuerySet {
	if len(metaTitle) == 0 {
		qs.db.AddError(errors.New("must at least pass one metaTitle in MetaTitleNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("meta_title NOT IN (?)", metaTitle))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) Offset(offset int) ArchiveQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs ArchiveQuerySet) One(ret *Archive) error {
	return qs.db.First(ret).Error
}

// OrderAscByArchivedAt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) OrderAscByArchivedAt() ArchiveQuerySet {
	return qs.w(qs.db.Order("archived_at ASC"))
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) OrderAscByCreatedAt() ArchiveQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) OrderAscByDeletedAt() ArchiveQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByFailedAt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) OrderAscByFailedAt() ArchiveQuerySet {
	return qs.w(qs.db.Order("failed_at ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) OrderAscByUpdatedAt() ArchiveQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByArchivedAt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) OrderDescByArchivedAt() ArchiveQuerySet {
	return qs.w(qs.db.Order("archived_at DESC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) OrderDescByCreatedAt() ArchiveQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) OrderDescByDeletedAt() ArchiveQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByFailedAt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) OrderDescByFailedAt() ArchiveQuerySet {
	return qs.w(qs.db.Order("failed_at DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) OrderDescByUpdatedAt() ArchiveQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// RequestUrlEq is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) RequestUrlEq(requestUrl string) ArchiveQuerySet {
	return qs.w(qs.db.Where("request_url = ?", requestUrl))
}

// RequestUrlIn is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) RequestUrlIn(requestUrl ...string) ArchiveQuerySet {
	if len(requestUrl) == 0 {
		qs.db.AddError(errors.New("must at least pass one requestUrl in RequestUrlIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("request_url IN (?)", requestUrl))
}

// RequestUrlNe is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) RequestUrlNe(requestUrl string) ArchiveQuerySet {
	return qs.w(qs.db.Where("request_url != ?", requestUrl))
}

// RequestUrlNotIn is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) RequestUrlNotIn(requestUrl ...string) ArchiveQuerySet {
	if len(requestUrl) == 0 {
		qs.db.AddError(errors.New("must at least pass one requestUrl in RequestUrlNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("request_url NOT IN (?)", requestUrl))
}

// SetArchivedAt is an autogenerated method
// nolint: dupl
func (u ArchiveUpdater) SetArchivedAt(archivedAt *time.Time) ArchiveUpdater {
	u.fields[string(ArchiveDBSchema.ArchivedAt)] = archivedAt
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u ArchiveUpdater) SetCreatedAt(createdAt time.Time) ArchiveUpdater {
	u.fields[string(ArchiveDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u ArchiveUpdater) SetDeletedAt(deletedAt *time.Time) ArchiveUpdater {
	u.fields[string(ArchiveDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetFailedAt is an autogenerated method
// nolint: dupl
func (u ArchiveUpdater) SetFailedAt(failedAt *time.Time) ArchiveUpdater {
	u.fields[string(ArchiveDBSchema.FailedAt)] = failedAt
	return u
}

// SetImage is an autogenerated method
// nolint: dupl
func (u ArchiveUpdater) SetImage(image string) ArchiveUpdater {
	u.fields[string(ArchiveDBSchema.Image)] = image
	return u
}

// SetMetaDescription is an autogenerated method
// nolint: dupl
func (u ArchiveUpdater) SetMetaDescription(metaDescription string) ArchiveUpdater {
	u.fields[string(ArchiveDBSchema.MetaDescription)] = metaDescription
	return u
}

// SetMetaTitle is an autogenerated method
// nolint: dupl
func (u ArchiveUpdater) SetMetaTitle(metaTitle string) ArchiveUpdater {
	u.fields[string(ArchiveDBSchema.MetaTitle)] = metaTitle
	return u
}

// SetRequestUrl is an autogenerated method
// nolint: dupl
func (u ArchiveUpdater) SetRequestUrl(requestUrl string) ArchiveUpdater {
	u.fields[string(ArchiveDBSchema.RequestUrl)] = requestUrl
	return u
}

// SetSlug is an autogenerated method
// nolint: dupl
func (u ArchiveUpdater) SetSlug(slug string) ArchiveUpdater {
	u.fields[string(ArchiveDBSchema.Slug)] = slug
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u ArchiveUpdater) SetUpdatedAt(updatedAt time.Time) ArchiveUpdater {
	u.fields[string(ArchiveDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SlugEq is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) SlugEq(slug string) ArchiveQuerySet {
	return qs.w(qs.db.Where("slug = ?", slug))
}

// SlugIn is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) SlugIn(slug ...string) ArchiveQuerySet {
	if len(slug) == 0 {
		qs.db.AddError(errors.New("must at least pass one slug in SlugIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("slug IN (?)", slug))
}

// SlugNe is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) SlugNe(slug string) ArchiveQuerySet {
	return qs.w(qs.db.Where("slug != ?", slug))
}

// SlugNotIn is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) SlugNotIn(slug ...string) ArchiveQuerySet {
	if len(slug) == 0 {
		qs.db.AddError(errors.New("must at least pass one slug in SlugNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("slug NOT IN (?)", slug))
}

// Update is an autogenerated method
// nolint: dupl
func (u ArchiveUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u ArchiveUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) UpdatedAtEq(updatedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) UpdatedAtGt(updatedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) UpdatedAtGte(updatedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) UpdatedAtLt(updatedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) UpdatedAtLte(updatedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs ArchiveQuerySet) UpdatedAtNe(updatedAt time.Time) ArchiveQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set ArchiveQuerySet

// ===== BEGIN of Archive modifiers

// ArchiveDBSchemaField describes database schema field. It requires for method 'Update'
type ArchiveDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f ArchiveDBSchemaField) String() string {
	return string(f)
}

// ArchiveDBSchema stores db field names of Archive
var ArchiveDBSchema = struct {
	Slug            ArchiveDBSchemaField
	MetaTitle       ArchiveDBSchemaField
	MetaDescription ArchiveDBSchemaField
	Image           ArchiveDBSchemaField
	RequestUrl      ArchiveDBSchemaField
	CreatedAt       ArchiveDBSchemaField
	UpdatedAt       ArchiveDBSchemaField
	ArchivedAt      ArchiveDBSchemaField
	FailedAt        ArchiveDBSchemaField
	DeletedAt       ArchiveDBSchemaField
}{

	Slug:            ArchiveDBSchemaField("slug"),
	MetaTitle:       ArchiveDBSchemaField("meta_title"),
	MetaDescription: ArchiveDBSchemaField("meta_description"),
	Image:           ArchiveDBSchemaField("image"),
	RequestUrl:      ArchiveDBSchemaField("request_url"),
	CreatedAt:       ArchiveDBSchemaField("created_at"),
	UpdatedAt:       ArchiveDBSchemaField("updated_at"),
	ArchivedAt:      ArchiveDBSchemaField("archived_at"),
	FailedAt:        ArchiveDBSchemaField("failed_at"),
	DeletedAt:       ArchiveDBSchemaField("deleted_at"),
}

// Update updates Archive fields by primary key
// nolint: dupl
func (o *Archive) Update(db *gorm.DB, fields ...ArchiveDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"slug":             o.Slug,
		"meta_title":       o.MetaTitle,
		"meta_description": o.MetaDescription,
		"image":            o.Image,
		"request_url":      o.RequestUrl,
		"created_at":       o.CreatedAt,
		"updated_at":       o.UpdatedAt,
		"archived_at":      o.ArchivedAt,
		"failed_at":        o.FailedAt,
		"deleted_at":       o.DeletedAt,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Archive %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// ArchiveUpdater is an Archive updates manager
type ArchiveUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewArchiveUpdater creates new Archive updater
// nolint: dupl
func NewArchiveUpdater(db *gorm.DB) ArchiveUpdater {
	return ArchiveUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Archive{}),
	}
}

// ===== END of Archive modifiers

// ===== END of all query sets
